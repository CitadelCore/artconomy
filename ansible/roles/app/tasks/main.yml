---

- name: Add Deadsnakes repo
  apt_repository:
    repo: ppa:deadsnakes/ppa

- name: Install base requirements
  apt:
    name:
      - python3.8
      - python3.8-dev
      - autoconf
      - libtool
      - python3-pip
      - python-virtualenv
      - uwsgi
      - git
      - uwsgi-plugin-python3
      - libpq-dev
      - software-properties-common
      - redis-server

- name: Enable redis service
  service: name=redis-server enabled=true

- name: Start redis service
  service: name=redis-server state=started

- name: Load app settings
  include_vars: "keys/{{env_prefix}}/app_settings.yml"

- name: Install NPM repos
  shell: "curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -"
  args:
    creates: /etc/apt/sources.list.d/nodesource.list
    warn: false

- name: Install NPM
  apt:
    name: nodejs
    state: present

- name: Install node version manager
  npm:
    registry: http://registry.npmjs.org/
    global: yes
    name: n

- name: Check version of node
  shell: node --version
  register: node_version

- name: Ensure correct version of node
  shell: n 14.17.2
  when: node_version.stdout != "v14.17.2"

- name: Add app user
  user:
    name: "{{ env_prefix }}"
    group: www-data
    shell: /bin/bash

- set_fact:
    home: "/home/{{env_prefix}}"

- name: Ensure proper home directory ownership
  file:
    path: "{{ home }}"
    owner: "{{env_prefix}}"
    group: www-data
    state: directory

- name: Create user environment files
  become: yes
  become_user: "{{ env_prefix }}"
  template: src="{{ item.src }}" dest="{{ home }}/{{ item.dest }}"
  with_items:
    - {src: "templates/bash/.profile", dest: ".profile"}
    - {src: "templates/bash/.bashrc", dest: ".bashrc"}

- name: Copy deployment key
  copy: src="keys/{{ env_prefix }}/.ssh" dest="{{ home }}/" owner="{{ env_prefix }}" mode=0600 directory_mode=0700 force=yes

- name: Copy Sentry settings
  copy: src="keys/{{ env_prefix }}/.sentryclirc" dest="{{ home }}/" owner="{{ env_prefix }}" mode=0600 directory_mode=0700 force=yes

- name: Clone source
  become: yes
  become_user: "{{ env_prefix }}"
  git: repo="git@github.com:Kelketek/artconomy.git" version="{{ app_version }}" dest="{{ home }}/artconomy" accept_hostkey=yes key_file="{{ home }}/.ssh/id_rsa" force=yes update=yes
  notify:
    - collect static assets
    - restart uwsgi
    - restart daphne
    - restart celery
    - restart celerybeat

- name: Copy Robots.txt
  copy: src="keys/{{ env_prefix }}/robots.txt" dest="{{ home }}/" owner="{{ env_prefix }}" group=www-data mode=0644 directory_mode=0700 force=yes

- name: Initialize virtual environment
  become: yes
  become_user: "{{ env_prefix }}"
  shell: "rm -rvf {{home}}/bin && /usr/bin/virtualenv -p /usr/bin/python3.8 {{home}} && touch {{home}}/.3-8-upgrade"
  args:
    executable: "/bin/bash"
    creates: "{{ home }}/.3-8-upgrade"
    warn: false

- name: Drop in verified pip
  become_user: "{{ env_prefix }}"
  template:
    src: "templates/bash/pip"
    dest: "{{home}}/bin/pip"
    mode: 0755

- name: Ensure default python link
  file:
    src: "{{home}}/bin/python3.8"
    dest: "{{home}}/bin/python"

- name: Ensure default python3 link
  file:
    src: "{{home}}/bin/python3.8"
    dest: "{{home}}/bin/python3"

- name: Install NPM packages
  become: yes
  become_user: "{{ env_prefix }}"
  npm: registry=http://registry.npmjs.org/ path="{{ home }}/artconomy"
  notify:
    - collect static assets


- name: Unzip filetype icons
  become: yes
  become_user: "{{ env_prefix }}"
  unarchive:
    src: "keys/{{env_prefix}}/icons.zip"
    dest: "{{home}}/artconomy/static_resources/"
    creates: "{{home}}/artconomy/static_resources/icons/UN.KNOWN.png"
  notify:
    - collect static assets

- name: Install a sufficiently high version of pip.
  become: yes
  become_user: "{{ env_prefix }}"
  pip: name=pip state=latest virtualenv="{{ home }}"

- name: Install app requirements by calling pip on requirements.txt
  become: yes
  become_user: "{{ env_prefix }}"
  pip: requirements="{{ home }}/artconomy/requirements.txt" virtualenv="{{ home }}"
  notify:
    - collect static assets
    - restart uwsgi
    - restart daphne
    - restart celery
    - restart celerybeat

- name: Set app configuration
  become: yes
  become_user: "{{ env_prefix }}"
  template: src="templates/settings.json.j2" dest="{{ home }}/settings.json"
  notify:
    - collect static assets
    - restart uwsgi
    - restart daphne
    - set tg webhook
    - restart celery
    - restart celerybeat

- name: Configure uwsgi
  template: src="templates/uwsgi/app.ini" dest="/etc/uwsgi/apps-available/artconomy.ini" owner=root group=root mode=0600
  notify:
    - restart uwsgi

- name: Create app log folder
  file: path="{{ home }}/logs/" owner="{{ env_prefix }}" mode=700 state=directory

- name: Check for static collection
  become: yes
  become_user: root
  check_git_revision_changed:
      directory: "{{ home }}/artconomy/"
      hash_file: "{{ home }}/.static_hash"
  register: static_status
  notify:
    - collect static assets

- name: Check for new migrations
  become: yes
  become_user: root
  check_migrations_changed:
      directory: "{{ home }}/artconomy/backend/apps/"
      hash_file: "{{ home }}/.migrations_hash"
      tilt: "{{ app_settings.FORCE_UPDATE }}"
  register: migrations_status
  notify:
    - migrator

- name: Enable app
  file: src="/etc/uwsgi/apps-available/artconomy.ini" dest="/etc/uwsgi/apps-enabled/artconomy.ini" state=link
  notify:
    - restart uwsgi

- name: Force local uwsgi'
  lineinfile:
    path: /etc/init.d/uwsgi
    regexp: '^DAEMON='
    line: 'DAEMON={{ home }}/bin/uwsgi'
  notify:
    - reload systemd

- name: Create Daphne Service
  template:
    src: "system/artconomy-daphne.service"
    dest: "/etc/systemd/system/artconomy-daphne.service"
  notify:
    - reload systemd

- name: Enable uwsgi service
  service: name=uwsgi enabled=true

- name: Start uwsgi service
  service: name=uwsgi state=started

- name: Enable daphne service
  service: name=artconomy-daphne enabled=true

- name: Start daphne service
  service: name=artconomy-daphne state=started

- name: Set up pinterest cron job
  template:
    src: "cron/pinterest"
    dest: "/etc/cron.d/pinterest"
    mode: 0755
  tags:
    # Not needed until Pinterest supports services.
    - never